{"version":3,"sources":["assets/Scripts/GameManager.ts","assets/Scripts/GameUIController.ts","assets/Scripts/InputManager.ts","assets/Scripts/MenuUIController.ts","assets/Scripts/Monster.ts","assets/Scripts/Player.ts","assets/Scripts/ScoreUIController.ts"],"names":["GameUIController_1","require","ScoreUIController_1","Monster_1","Player_1","_a","cc","_decorator","ccclass","property","DIRECTION","GameManager","_super","__extends","_this","apply","this","arguments","feverFinishDelay","gameRestartDelay","_menuUI","_btnDiff","_gameUI","_scoreUI","_difficulty","_score","_fever","_comboCount","_maxCombo","_timeCount","_health","_feverPerScore","_insaneTimer","_feverMode","_blockInputMovement","_blockInputFeverFinish","player","monsterPrefab","_monsterDirectionArray","_monsterArr","_monsterCount","prototype","onLoad","initMenu","find","getComponent","default","start","showMain","active","on","startGame","bind","resetGame","node","showResult","restartGame","diff","initializeGame","updateHealth","updateFever","updateRemainTime","updateScore","updateCombo","i","makeNewMonster","countDown","startCountDown","setInsaneTimer","schedule","_updateTimeCount","length","forEach","element","removeFromParent","gameOver","leftAction","log","LEFT","attackMonster","playerDamaged","rightAction","RIGHT","damaged","splice","moveToCenter","score","addFever","targetPos","v2","tween","to","position","delay","call","pos","Math","floor","random","push","index","monster","instantiate","moveTargetPos","setPosition","addChild","init","startInsaneTimer","feverOn","setFeverMode","unschedule","_updateFever","pauseTimer","setTimeout","dt","finishFever","finishFeverMode","runCheat","__decorate","Prefab","Component","exports","GameManager_1","GameUIController","_gameManager","_lbScore","_lbTime","_lbGameOver","_btnMain","_lbReady","_lbGo","_lbFever","_lbFeverFinish","_feverGauge","_heartContainer","_lbCombo","heartPrefab","Label","ProgressBar","heart","gameStartCallback","health","warn","children","time","string","fever","progress","opacity","count","parent","InputManager","_pressA","_pressB","gameMamager","_leftPanel","_rightPanel","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","onDestroy","off","event","keyCode","macro","KEY","left","right","MainUIController","Monster","colorArr","color","lbHealth","hp","_atkTimer","gameManager","_animation","_atkTimerCur","_atkTimerBase","isLeft","difficulty","Animation","rnd","scaleX","play","onePunch","dieAnimation","x","removeSelf","_insaneModeTimer","_attack","Player","_animationName","_baseScale","_currentAtkAnim","_atkAnimationInterval","_actionTimeout","onAnimFinishedCallback","_playAtkAnim","clearTimeout","NewClass","_lbLife","_lbTotal","_btnRetry","_targetLabel","_counter","_countingTime","_combo","_life","_skipCounting","combo","life","_labelCounting","_showRetry","label","end","currNum","dcount","round","toString","director","getActionManager","removeAllActionsFromTarget","unscheduleAllCallbacks"],"mappings":"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","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameUIController from \"./GameUIController\";\nimport ScoreUIController from \"./ScoreUIController\"\nimport Monster from \"./Monster\";\nimport Player from \"./Player\";\nconst {ccclass, property} = cc._decorator;\n\n\n\nenum DIRECTION {\n    LEFT = -1,\n    RIGHT = 1,\n}\n@ccclass\nexport default class GameManager extends cc.Component {\n\n    feverFinishDelay = 0.3;\n    gameRestartDelay = 1;\n\n\n\n\n\n    _menuUI : cc.Node = null!;\n    _btnDiff : cc.Node[] = [];\n\n    _gameUI : GameUIController = null!;\n    _scoreUI : ScoreUIController = null!;\n\n\n    //InGame Value\n    _difficulty : number = 0;\n    _score = 0;\n    _fever = 0;\n    _comboCount : number= 0;\n    _maxCombo : number = 0;\n    _timeCount : number = 30;\n    _health = 3;\n    _feverPerScore = 99;\n    _insaneTimer = 0.2;\n    _feverMode : boolean = false;\n\n    _blockInputMovement : boolean = true;\n    _blockInputFeverFinish : boolean = true;\n\n\n\n\n    @property(Player)\n    player : Player = null!;\n    @property(cc.Prefab)\n    monsterPrefab : cc.Prefab = null!;\n\n\n\n    //GameNode\n    _monsterDirectionArray : number[] = [];\n    _monsterArr : Monster[] = [];\n\n    _monsterCount : number = 4;\n\n    onLoad(){\n        this.initMenu();\n\n        this._gameUI = cc.find(\"GameUI\").getComponent(GameUIController);\n        this._scoreUI = cc.find(\"ScoreUI\").getComponent(ScoreUIController);\n\n\n\n    }\n\n\n\n    start(){\n        // this.showResult();\n        this.showMain();\n\n\n        // this.schedule( this.runCheat );\n    }\n\n\n\n\n    initMenu(){\n        this._menuUI = cc.find(\"MenuUI\");\n\n        this._menuUI.active = true;\n        cc.find( \"lbEasy\"   , this._menuUI ).on('click' , this.startGame.bind( this , 0) , this );  \n        cc.find( \"lbHard\"   , this._menuUI ).on('click' , this.startGame.bind( this , 1) , this );  \n        cc.find( \"lbHell\"   , this._menuUI ).on('click' , this.startGame.bind( this , 2) , this );  \n        cc.find( \"lbInsane\" , this._menuUI ).on('click' , this.startGame.bind( this , 3) , this );\n\n    }\n\n    showMain(){\n        this.resetGame();\n        this._gameUI.node.active = false;\n        this._menuUI.active = true;\n        this._scoreUI.node.active = false;\n    }\n\n    showResult(){\n        this._gameUI.node.active = false;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = true;\n        this._scoreUI.showResult(this._score, this._maxCombo , this._health * 100);\n    }\n\n    restartGame(){\n        this.resetGame();\n        this.startGame( this._difficulty );\n    }\n\n\n\n    startGame( diff : number ){\n\n\n        this._gameUI.node.active = true;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = false;\n\n\n\n        this._difficulty = diff;\n\n\n        this._gameUI.initializeGame();\n        this._gameUI.updateHealth(      this._health );\n        this._gameUI.updateFever(       this._fever);\n        this._gameUI.updateRemainTime(  this._timeCount);\n        this._gameUI.updateScore(       this._score );\n        this._gameUI.updateCombo(       this._comboCount );\n\n\n        for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n            this.makeNewMonster();\n        }\n\n\n\n\n        let countDown = 1;\n        this._gameUI.startCountDown( countDown  , ()=>{\n            this.setInsaneTimer();\n            this._blockInputMovement = false;\n            this._blockInputFeverFinish = false;\n            this.schedule( this._updateTimeCount , 1 );\n        });\n    }\n\n\n    resetGame(){\n        // this._difficulty = 0;\n        this._score = 0;\n        this._fever = 0;\n        this._timeCount = 30;\n        this._health = 3;\n        this._feverPerScore = 10;\n        this._comboCount = 0;\n        this._maxCombo = 0;\n\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.forEach( element =>{\n            element.node.removeFromParent();\n        })\n        this._monsterArr.length = 0;\n    }\n\n    _updateTimeCount(){\n        this._timeCount--;\n        this._gameUI.updateRemainTime( this._timeCount );\n        if ( this._timeCount === 0 ){\n            this.gameOver();\n        }\n    }\n\n    leftAction(){\n        cc.log(\"left action\");\n        if ( this._blockInputMovement === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT  || this._feverMode ){\n            this.player.leftAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n    rightAction(){\n        cc.log(\"right action\");\n        if ( this._blockInputMovement === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.RIGHT || this._feverMode ){\n            this.player.rightAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n\n    attackMonster(){\n        cc.log(\"attack monster \" + this._feverMode );\n        if ( this._monsterArr.length === 0 ) return; \n\n        if ( this._monsterArr[0].damaged( this._feverMode )  ){\n            this._monsterDirectionArray.splice(0,1);\n            this._monsterArr.splice(0,1);\n            this.moveToCenter();\n            this.makeNewMonster();\n            this.score();\n            this.addFever();\n            this.setInsaneTimer();\n        }\n\n        this._maxCombo = this._maxCombo > this._comboCount ? this._maxCombo : this._comboCount;\n        this._gameUI.updateCombo(       this._comboCount++ );\n    }\n\n    moveToCenter(){\n\n        this._blockInputMovement = true;\n        for( let i = 0 ; i < this._monsterDirectionArray.length ; i ++ ){\n            let targetPos = cc.v2((i + 1) * 100 *  this._monsterDirectionArray[i] , 0);\n            cc.tween( this._monsterArr[i].node )\n            .to( 0.1 , { position : targetPos})\n            .start();\n        }\n\n        cc.tween( this.node )\n        .delay(0.1)\n        .call(()=>{ this._blockInputMovement = false; })\n        .start();\n    }\n\n    makeNewMonster(){\n        let pos = Math.floor(Math.random() * 2);\n        if ( pos === 0 ) pos = -1;\n        this._monsterDirectionArray.push( pos );\n\n\n\n        let index = this._monsterDirectionArray.length;\n        let monster = cc.instantiate(this.monsterPrefab);\n\n\n        let moveTargetPos = cc.v2(index  * 100 *  pos , 0 );\n        monster.setPosition( 5 * 100 *  pos , 0 );\n\n        cc.tween( monster )\n        .to( 0.3 , {position : moveTargetPos} )\n        .start();\n\n        this.node.addChild( monster );\n\n        this._monsterArr.push(monster.getComponent(Monster));\n\n        monster.getComponent(Monster).init( pos === DIRECTION.LEFT , this._difficulty);\n    }\n\n    setInsaneTimer(){\n        if ( this._difficulty === 3)\n            this._monsterArr[0].startInsaneTimer();\n    }\n\n\n    score(){\n        this._score++;\n        this._gameUI.updateScore( this._score );\n    }\n\n    addFever(){\n        if ( this._feverMode === true ) return;\n        this._fever += 1 / this._feverPerScore;\n\n\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever >= 1) {\n            this.feverOn();\n        }\n    }\n\n    feverOn(){\n        this._feverMode = true;\n        this._gameUI.setFeverMode();\n        this.unschedule( this._updateTimeCount );\n\n        // this._timeCount--;\n        this._updateTimeCount();\n\n        this.schedule( this._updateFever  );\n        cc.log(\"fever start \");\n    }\n\n\n\n    playerDamaged(){\n\n        this._health--;\n        if ( this._health <= 0 ){\n            this.gameOver();\n        }\n\n        this._gameUI.updateHealth( this._health );\n\n\n        this._comboCount = 0;\n        this._gameUI.updateCombo(       this._comboCount );\n\n    }\n\n\n    gameOver(){\n        this._blockInputFeverFinish = true;\n        this._blockInputMovement = true;\n        this._monsterArr[0].pauseTimer();\n        this._gameUI.gameOver();\n        this.unschedule( this._updateTimeCount );\n        this.unschedule( this._updateFever );\n\n\n        setTimeout( ()=>{\n            this.showResult();\n        } , 1500 );\n    }\n\n\n\n\n    _updateFever( dt : number){\n        this._fever -= dt * 0.4;\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever <= 0){\n            this.unschedule( this._updateFever );\n            this.finishFever();\n        }\n    }\n\n    finishFever(){\n        cc.log(\"fever finished\" , \"block inpug\");\n        this._feverMode = false;\n        this._blockInputFeverFinish = true;\n\n\n        //몬스터 싹 날리기\n        this._monsterArr.forEach( element =>{\n            element.damaged( true );\n        });\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.length = 0;\n        //\n\n\n\n        this._gameUI.finishFeverMode( this.feverFinishDelay , this.gameRestartDelay );\n\n\n\n\n        cc.tween( this.node )\n        .delay( this.feverFinishDelay )\n        .call(()=>{\n            for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n                this.makeNewMonster();\n            }\n        })\n        .delay( this.gameRestartDelay )\n        .call( ()=>{\n            this.schedule( this._updateTimeCount , 1 );\n            this._blockInputFeverFinish = false;\n        })\n        .start();\n    }\n\n\n\n    runCheat(){\n        if ( this._monsterDirectionArray.length === 0 ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT )\n            this.leftAction();\n        else \n            this.rightAction();\n\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameUIController extends cc.Component {\n\n\n    _gameManager : GameManager = null!;\n\n    _gameUI : cc.Node = null;\n    _lbScore    : cc.Label = null!;\n    _lbTime     : cc.Label = null!;\n    _lbGameOver : cc.Node = null!;\n    _btnMain : cc.Node = null;\n    _lbReady : cc.Node = null!;\n    _lbGo : cc.Node = null!;\n    _lbFever    : cc.Node = null!;\n    _lbFeverFinish : cc.Node = null!;\n    _feverGauge : cc.ProgressBar = null!;\n    _heartContainer : cc.Node = null!;\n\n\n    _lbCombo : cc.Label = null!;\n\n    @property(cc.Prefab)\n    heartPrefab : cc.Prefab = null!;\n\n    onLoad () {\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._gameUI            = this.node;\n        this._lbScore           = cc.find(\"lbScore\", this._gameUI).getComponent(cc.Label);\n        this._lbTime            = cc.find(\"lbTime\", this._gameUI).getComponent(cc.Label);\n        this._lbGameOver        = cc.find(\"lbGameOver\", this._gameUI);\n        this._lbReady           = cc.find(\"lbReady\", this._gameUI);\n        this._lbGo              = cc.find(\"lbGo\", this._gameUI);\n        this._lbFever           = cc.find(\"lbFever\", this._gameUI);\n        this._feverGauge        = cc.find(\"feverGauge\", this._gameUI).getComponent(cc.ProgressBar);\n        this._heartContainer    = cc.find(\"heartContainer\", this._gameUI);\n        this._btnMain           = cc.find(\"lbGameOver/btnMain\" , this._gameUI );\n        this._lbFeverFinish     = cc.find(\"lbFeverFinish\", this._gameUI);\n        this._lbCombo           = cc.find(\"comboUI/lbCombo\", this._gameUI).getComponent(cc.Label);\n\n\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n\n        // this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n\n    }\n\n\n\n    initializeGame(){\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbFeverFinish.active   = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n        this._heartContainer.active = true;\n        // this._heartContainer.removeAllChildren();\n\n\n        let heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n    }\n\n    startCountDown( countDown : number , gameStartCallback : ()=>void){\n        cc.tween(this.node)\n        .call(()=>{\n            this._lbReady.active = true;\n        })\n        .delay(countDown)\n        .call(()=>{\n            this._lbReady.active = false;\n            this._lbGo.active = true;\n            gameStartCallback();\n        })\n        .delay(0.4)\n        .call(()=>{\n            this._lbGo.active = false;\n        })\n        .start();\n    }\n\n\n    updateHealth( health : number ){\n        if ( health < 0) cc.warn( \"health below 0 \" , health );\n        for( let i = 0 ; i < this._heartContainer.children.length ; i ++ ){\n            if ( i < health )\n                this._heartContainer.children[i].active = true;\n            else \n                this._heartContainer.children[i].active = false;\n        }\n    }\n\n    updateRemainTime( time : number ){\n        this._lbTime.string = time + \"\";\n    }\n\n    updateScore( score : number ){\n        this._lbScore.string = score +\"\";\n    }\n\n    updateFever( fever : number ){\n        this._feverGauge.progress = fever;\n    }\n\n\n    setFeverMode( ){\n        this._lbFever.active = true;\n        this._lbFever.opacity = 255;\n    }\n\n    finishFeverMode(feverFinishDelay,gameRestartDelay){\n        this._lbFeverFinish.active = true;\n        cc.tween( this._lbFever )\n        .to( feverFinishDelay , {opacity : 0})\n        .delay( gameRestartDelay )\n        .call( ()=>{\n            this._lbFeverFinish.active = false;\n        })\n        .start();\n    }\n\n\n    gameOver(){\n        this._lbGameOver.active = true;\n    }\n\n    updateCombo( count : number ){\n        if ( count === 0 ){\n            this._lbCombo.node.parent.active = false;\n        }\n        else {\n            this._lbCombo.node.parent.active = true;\n        }\n\n        this._lbCombo.string = count + \"\\nCombo\";\n    }\n}\n","\nconst {ccclass, property} = cc._decorator;\nimport GameManager from \"./GameManager\"\n\n@ccclass\nexport default class InputManager extends cc.Component {\n\n\n\n\n    _pressA : boolean = false;\n    _pressB : boolean = false;\n\n\n    gameMamager : GameManager = null!;\n\n\n    _leftPanel : cc.Node = null!;\n    _rightPanel : cc.Node = null!;\n\n    onLoad () {\n\n        this.gameMamager = this.getComponent(\"GameManager\");\n\n        this._leftPanel = cc.find(\"InputPanelLeft\");\n        this._rightPanel = cc.find(\"InputPanelRight\");\n\n\n\n\n    }\n\n    start () {\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n\n\n            cc.log(\"init event \"); \n            this._leftPanel.on('click' , this.gameMamager.leftAction , this.gameMamager );\n            this._rightPanel.on('click' , this.gameMamager.rightAction , this.gameMamager);\n    }\n\n    onDestroy() {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n\n    onKeyDown(event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                if ( this._pressA === false ){\n                    this.gameMamager.leftAction();\n                }\n                this._pressA = true;\n                break;\n            case cc.macro.KEY.right:\n                if ( this._pressB === false ){\n                    this.gameMamager.rightAction();\n                }\n                this._pressB = true;\n                break;\n        }\n    }\n\n    onKeyUp (event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                this._pressA = false;\n                break;\n            case cc.macro.KEY.right:\n                this._pressB = false;\n                break;\n        }\n\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MainUIController extends cc.Component {\n\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Monster extends cc.Component {\n\n    colorArr: cc.Color[] = [\n        cc.color(255,251,171),\n        cc.color(171,251,255),\n        cc.color(255,171,255),\n    ];\n\n\n    health : number = 1;\n\n    lbHealth : cc.Label = null!;\n    hp : cc.Node[] = [];\n\n    _atkTimer : cc.ProgressBar = null!;\n\n\n    gameManager : GameManager = null!;\n\n    _animation : cc.Animation = null!;\n\n    onLoad(){\n        this._atkTimer = cc.find('atkTimer', this.node).getComponent(cc.ProgressBar);\n        this._atkTimer.node.active = false;\n\n        this.gameManager = cc.find(\"GameManager\").getComponent(GameManager);\n\n    }\n\n    init( isLeft : boolean  , difficulty : number){\n        this._animation = this.getComponent(cc.Animation);\n\n        let rnd = difficulty === 0 ? 2 : 3;\n        let health = Math.floor(Math.random() * rnd ) + 1;\n\n\n        if ( isLeft ){\n            this.node.scaleX = -1;\n        }\n\n\n        this.hp.push( this.node.children[1]);\n        this.hp.push( this.node.children[2]);\n        this.hp.push( this.node.children[3]);\n\n\n        if ( health === 1 ){\n            this.node.color     = this.colorArr[0];\n            this.hp[0].color    = this.colorArr[0];\n            this.hp[1].color    = this.colorArr[0];\n            this.hp[2].color    = this.colorArr[0];\n            this.hp[0].active = true;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n        else if ( health === 2 ){\n            this.node.color     = this.colorArr[1];\n            this.hp[0].color    = this.colorArr[1];\n            this.hp[1].color    = this.colorArr[1];\n            this.hp[2].color    = this.colorArr[1];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = false;\n        }\n        else if ( health === 3 ){\n            this.node.color     = this.colorArr[2];\n            this.hp[0].color    = this.colorArr[2];\n            this.hp[1].color    = this.colorArr[2];\n            this.hp[2].color    = this.colorArr[2];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = true;\n        }\n\n        if ( difficulty >= 2 ){\n            this.hp[0].active = false;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n\n        if ( difficulty >= 3 ){\n            this._atkTimer.node.active =true;\n        }\n\n        this.health = health;\n\n        this.lbHealth = cc.find( \"lbHealth\" , this.node ).getComponent(cc.Label);\n        this.lbHealth.string = this.health + \"\";\n\n\n        this._animation.play('monsterIdle');\n    }\n\n\n    damaged( onePunch : boolean ) : boolean {\n        this.health--;\n        this.lbHealth.string = this.health + \"\";\n        this.hp[this.health].active = false;\n\n        this._atkTimerCur = this._atkTimerBase;\n\n        this._animation.play('monsterDamage');\n        if ( this.health === 0  || onePunch ){\n            this.dieAnimation();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n\n    dieAnimation(){\n        this._animation.play('monsterDead');\n        cc.tween( this.node )\n        .to( 0.1 , { opacity : 0 , position : cc.v2( this.node.x , 100) })\n        .removeSelf()\n        .start();\n        // this.node.removeFromParent();\n    }\n\n\n    _atkTimerCur : number = 99;\n    _atkTimerBase : number = 0.5;\n    startInsaneTimer(){\n        this._atkTimer.node.active = true;\n        this._atkTimerCur = this._atkTimerBase;\n        this.schedule( this._insaneModeTimer , 0 );\n    }\n\n    _insaneModeTimer( dt : number ){\n        this._atkTimerCur -= dt ;\n        this._atkTimer.progress = this._atkTimerCur / this._atkTimerBase;\n        if ( this._atkTimerCur <= 0 ){\n            this._atkTimerCur = this._atkTimerBase;\n            this._attack();\n        }\n    }\n\n    _attack(){\n        // cc.log('Monster.ts(118)' , \"_attack\" );\n        this.gameManager.playerDamaged();\n    }\n\n    pauseTimer(){\n        this.unschedule( this._insaneModeTimer );\n        // this._atkTimer.node.active = false;\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Player extends cc.Component {\n\n    _animation : cc.Animation = null!\n    _animationName : string[] = [\n        'characterIdle',\n        'characterAtk1',\n        'characterAtk2',\n        'characterAtk3'\n    ];\n\n    //테스트용 임시 변수\n    _baseScale : number = 0.5;\n    _currentAtkAnim : number = 0;\n\n\n\n    _atkAnimationInterval : number = 0.2;\n    _actionTimeout : number = -1;\n\n    onLoad(){\n        this._animation = this.getComponent(cc.Animation);\n        this._animation.on( 'finished' , this.onAnimFinishedCallback, this);\n    }\n\n    init(){\n\n    }\n\n\n    leftAction(){\n        this.node.scaleX = this._baseScale * -1;\n\n        this._playAtkAnim();\n    }\n\n    rightAction(){\n        this.node.scaleX = this._baseScale;\n        this._playAtkAnim();\n    }\n\n    _playAtkAnim(){\n        this._currentAtkAnim++;\n        if ( this._currentAtkAnim > 3 ){\n            this._currentAtkAnim = 1;\n        }\n        clearTimeout(this._actionTimeout);\n        this._actionTimeout = -1;\n        // cc.log('Player.ts(57)' , 'characterAtk' + this._currentAtkAnim );\n        this._animation.play('characterAtk' + this._currentAtkAnim );\n    }\n\n    onAnimFinishedCallback(){\n        this._actionTimeout = setTimeout( ()=>{\n            this._animation.play('characterIdle');\n            this._currentAtkAnim = 0;\n            this._actionTimeout = -1;\n        } , this._atkAnimationInterval * 1000);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n    _gameManager : GameManager = null!;\n    _lbScore : cc.Label = null!;\n    _lbCombo : cc.Label = null!;\n    _lbLife : cc.Label = null!;\n    _lbTotal : cc.Label = null!;\n\n\n    _btnMain : cc.Node = null!;\n    _btnRetry : cc.Node = null!;\n\n    _targetLabel : cc.Label = null!;\n\n    _counter : number = 20;\n    _countingTime : number = 1;\n\n\n    _score : number = 0;\n    _combo : number = 0;\n    _life : number = 0;\n\n    onLoad(){\n\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._lbScore = cc.find(\"lbScore2\" , this.node ).getComponent(cc.Label );\n        this._lbCombo = cc.find(\"lbCombo2\" , this.node ).getComponent(cc.Label );\n        this._lbLife  = cc.find(\"lbLife2\" , this.node ).getComponent(cc.Label );\n        this._lbTotal = cc.find(\"lbTotal2\" , this.node ).getComponent(cc.Label );\n        \n\n\n        this._btnMain = cc.find( \"btnMain\" , this.node );\n        this._btnRetry = cc.find( \"btnRetry\" , this.node );\n\n\n        this._btnMain.active = false;\n        this._btnRetry.active = false;\n\n\n        this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n        this._btnRetry.on('click', this._gameManager.restartGame , this._gameManager );\n\n        this.node.on('click' , this._skipCounting , this );\n    }\n\n\n    showResult( score : number , combo : number , life : number ){\n\n        this._score = score;\n        this._combo = combo;\n        this._life = life;\n\n        this._lbScore.string = \"\";\n        this._lbCombo.string = \"\";\n        this._lbLife.string = \"\";\n        this._lbTotal.string = \"\";\n\n        cc.tween( this.node )\n        .call( ()=>{\n            this._labelCounting( this._lbScore , 0 , score );\n            this._labelCounting( this._lbTotal , 0 , score );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbCombo , 0 , combo );\n            this._labelCounting( this._lbTotal , score ,  score + combo  );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbLife , 0 , life );\n            this._labelCounting( this._lbTotal , score + combo  , score + combo + life );\n        })\n        .delay(this._countingTime + 0.5)\n        .call(()=>{\n            this._showRetry();\n        })\n        .start();\n    }\n\n    _labelCounting( label : cc.Label , start : number , end : number ){\n\n\n        let dt = this._countingTime / this._counter;\n    \n        let currNum = start;\n        let dcount = (end - start) / this._counter;\n\n    \n        label.schedule( ()=>{ \n            currNum += dcount;\n            label.string = Math.round(currNum).toString();\n        }, \n        dt, \n        this._counter -1);\n    }\n\n    _skipCounting(){\n        cc.director.getActionManager().removeAllActionsFromTarget(this.node , true);\n        this._lbScore.unscheduleAllCallbacks();\n        this._lbLife.unscheduleAllCallbacks();\n        this._lbCombo.unscheduleAllCallbacks();\n        this._lbTotal.unscheduleAllCallbacks();\n\n        this._lbScore.string = this._score.toString();\n        this._lbCombo.string = this._combo.toString();\n        this._lbLife.string = this._life.toString();\n\n        this._lbTotal.string = ( this._score + this._combo + this._life ).toString();\n        this._showRetry();\n    }\n\n    _showRetry(){\n        this._btnMain.active = true;\n        this._btnRetry.active = true;\n    }\n}\n"],"file":"index.js"}