{"version":3,"sources":["assets/Scripts/GameManager.ts","assets/Scripts/GameUIController.ts","assets/Scripts/InputManager.ts","assets/Scripts/MenuUIController.ts","assets/Scripts/Monster.ts","assets/Scripts/Player.ts","assets/Scripts/ScoreUIController.ts"],"names":["DIRECTION","GameUIController_1","require","ScoreUIController_1","Monster_1","Player_1","_a","cc","_decorator","ccclass","property","GameManager","_super","__extends","_this","apply","this","arguments","feverFinishDelay","gameRestartDelay","_menuUI","_btnDiff","_gameUI","_scoreUI","_monsterDistance","_difficulty","_score","_fever","_comboCount","_maxCombo","_timeCount","_health","_feverPerScore","_insaneTimer","_feverMode","_blockInput","_blockInputFeverFinish","player","monsterPrefab","_monsterDirectionArray","_monsterArr","_monsterCount","prototype","onLoad","initMenu","find","getComponent","default","start","showMain","active","on","startGame","bind","resetGame","node","showResult","restartGame","diff","initializeGame","updateHealth","updateFever","updateRemainTime","updateScore","updateCombo","i","makeNewMonster","startCountDown","setInsaneTimer","schedule","_updateTimeCount","length","forEach","element","removeFromParent","gameOver","leftAction","log","LEFT","attackMonster","playerDamaged","rightAction","RIGHT","damaged","splice","moveToCenter","score","addFever","targetPos","v2","tween","to","position","pos","Math","floor","random","push","index","monster","instantiate","moveTargetPos","setPosition","addChild","init","startInsaneTimer","feverOn","setFeverMode","unschedule","_updateFever","pauseTimer","setTimeout","dt","finishFever","finishFeverMode","delay","call","runCheat","__decorate","Prefab","Component","exports","GameManager_1","GameUIController","_gameManager","_lbScore","_lbTime","_lbGameOver","_btnMain","_lbReady","_lbGo","_lbFever","_lbFeverFinish","_feverGauge","_heartContainer","_lbCombo","heartPrefab","Label","ProgressBar","heart","countDown","gameStartCallback","health","warn","children","time","string","fever","progress","opacity","count","parent","InputManager","_pressA","_pressB","gameMamager","_leftPanel","_rightPanel","_inputDelay","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","onDestroy","off","event","keyCode","macro","KEY","left","blockInput","right","MainUIController","Monster","colorArr","color","hp","_atkTimer","gameManager","_characterNode","_animation","_atkTimerCur","_atkTimerBase","isLeft","difficulty","Animation","rnd","scaleX","healthContainer","play","onePunch","dieAnimation","x","removeSelf","_insaneModeTimer","_attack","Player","_animationName","_baseScale","_currentAtkAnim","_atkAnimationInterval","_actionTimeout","onAnimFinishedCallback","_playAtkAnim","clearTimeout","NewClass","_lbLife","_lbTotal","_btnRetry","_targetLabel","_counter","_countingTime","_combo","_life","_skipCounting","combo","life","_labelCounting","_showRetry","label","end","currNum","dcount","round","toString","director","getActionManager","removeAllActionsFromTarget","unscheduleAllCallbacks"],"mappings":"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","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameUIController from \"./GameUIController\";\nimport ScoreUIController from \"./ScoreUIController\"\nimport Monster from \"./Monster\";\nimport Player from \"./Player\";\nconst {ccclass, property} = cc._decorator;\n\n\n\nenum DIRECTION {\n    LEFT = -1,\n    RIGHT = 1,\n}\n@ccclass\nexport default class GameManager extends cc.Component {\n\n    feverFinishDelay = 0.3;\n    gameRestartDelay = 1;\n\n\n\n\n\n    _menuUI : cc.Node = null!;\n    _btnDiff : cc.Node[] = [];\n\n    _gameUI : GameUIController = null!;\n    _scoreUI : ScoreUIController = null!;\n\n\n    _monsterDistance : number = 64;\n\n\n    //InGame Value\n    _difficulty : number = 0;\n    _score = 0;\n    _fever = 0;\n    _comboCount : number= 0;\n    _maxCombo : number = 0;\n    _timeCount : number = 30;\n    _health = 3;\n    _feverPerScore = 99;\n    _insaneTimer = 0.2;\n    _feverMode : boolean = false;\n\n    _blockInput : boolean = true;\n    _blockInputFeverFinish : boolean = true;\n\n\n\n\n    @property(Player)\n    player : Player = null!;\n    @property(cc.Prefab)\n    monsterPrefab : cc.Prefab = null!;\n\n\n\n    //GameNode\n    _monsterDirectionArray : number[] = [];\n    _monsterArr : Monster[] = [];\n\n    _monsterCount : number = 4;\n\n    onLoad(){\n        this.initMenu();\n\n        this._gameUI = cc.find(\"GameUI\").getComponent(GameUIController);\n        this._scoreUI = cc.find(\"ScoreUI\").getComponent(ScoreUIController);\n\n\n\n    }\n\n\n\n    start(){\n        // this.showResult();\n        this.showMain();\n\n\n        // this.schedule( this.runCheat );\n    }\n\n\n\n\n    initMenu(){\n        this._menuUI = cc.find(\"MenuUI\");\n\n        this._menuUI.active = true;\n        cc.find( \"lbEasy\"   , this._menuUI ).on('click' , this.startGame.bind( this , 0) , this );  \n        cc.find( \"lbHard\"   , this._menuUI ).on('click' , this.startGame.bind( this , 1) , this );  \n        cc.find( \"lbHell\"   , this._menuUI ).on('click' , this.startGame.bind( this , 2) , this );  \n        cc.find( \"lbInsane\" , this._menuUI ).on('click' , this.startGame.bind( this , 3) , this );\n\n    }\n\n    showMain(){\n        this.resetGame();\n        this._gameUI.node.active = false;\n        this._menuUI.active = true;\n        this._scoreUI.node.active = false;\n    }\n\n    showResult(){\n        this._gameUI.node.active = false;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = true;\n        this._scoreUI.showResult(this._score, this._maxCombo , this._health * 100);\n    }\n\n    restartGame(){\n        this.resetGame();\n        this.startGame( this._difficulty );\n    }\n\n\n\n    startGame( diff : number ){\n\n\n        this._gameUI.node.active = true;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = false;\n\n\n\n        this._difficulty = diff;\n\n\n        this._gameUI.initializeGame();\n        this._gameUI.updateHealth(      this._health );\n        this._gameUI.updateFever(       this._fever);\n        this._gameUI.updateRemainTime(  this._timeCount);\n        this._gameUI.updateScore(       this._score );\n        this._gameUI.updateCombo(       this._comboCount );\n\n\n        for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n            this.makeNewMonster();\n        }\n\n\n\n\n        let countDown = 1;\n        this._gameUI.startCountDown( countDown  , ()=>{\n            this.setInsaneTimer();\n            this._blockInput = false;\n            this._blockInputFeverFinish = false;\n            this.schedule( this._updateTimeCount , 1 );\n        });\n    }\n\n\n    resetGame(){\n        // this._difficulty = 0;\n        this._score = 0;\n        this._fever = 0;\n        this._timeCount = 30;\n        this._health = 3;\n        this._feverPerScore = 10;\n        this._comboCount = 0;\n        this._maxCombo = 0;\n\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.forEach( element =>{\n            element.node.removeFromParent();\n        })\n        this._monsterArr.length = 0;\n    }\n\n    _updateTimeCount(){\n        this._timeCount--;\n        this._gameUI.updateRemainTime( this._timeCount );\n        if ( this._timeCount === 0 ){\n            this.gameOver();\n        }\n    }\n\n    leftAction(){\n        cc.log(\"left action\");\n        if ( this._blockInput === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT  || this._feverMode ){\n            this.player.leftAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n    rightAction(){\n        cc.log(\"right action\");\n        if ( this._blockInput === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.RIGHT || this._feverMode ){\n            this.player.rightAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n\n    attackMonster(){\n        cc.log(\"attack monster \" + this._feverMode );\n        if ( this._monsterArr.length === 0 ) return; \n\n        if ( this._monsterArr[0].damaged( this._feverMode )  ){\n            this._monsterDirectionArray.splice(0,1);\n            this._monsterArr.splice(0,1);\n            this.moveToCenter();\n            this.makeNewMonster();\n            this.score();\n            this.addFever();\n            this.setInsaneTimer();\n        }\n\n        this._maxCombo = this._maxCombo > this._comboCount ? this._maxCombo : this._comboCount;\n        this._gameUI.updateCombo(       this._comboCount++ );\n    }\n\n    moveToCenter(){\n\n        //입력을 input manager에서 막게 하자\n        // this._blockInput = true;\n        // cc.tween( this.node )\n        // .delay(0.1)\n        // .call(()=>{ this._blockInput = false; })\n        // .start();\n\n\n        for( let i = 0 ; i < this._monsterDirectionArray.length ; i ++ ){\n            let targetPos = cc.v2((i + 1) * this._monsterDistance *  this._monsterDirectionArray[i] , 0);\n            cc.tween( this._monsterArr[i].node )\n            .to( 0.1 , { position : targetPos})\n            .start();\n        }\n\n\n    }\n\n    makeNewMonster(){\n        let pos = Math.floor(Math.random() * 2);\n        if ( pos === 0 ) pos = -1;\n        this._monsterDirectionArray.push( pos );\n\n\n\n        let index = this._monsterDirectionArray.length;\n        let monster = cc.instantiate(this.monsterPrefab);\n\n\n        let moveTargetPos = cc.v2(index  * this._monsterDistance *  pos , 0 );\n        monster.setPosition( this._monsterDistance * 6 *  pos , 0 );\n\n        cc.tween( monster )\n        .to( 0.3 , {position : moveTargetPos} )\n        .start();\n\n        this.node.addChild( monster );\n\n        this._monsterArr.push(monster.getComponent(Monster));\n\n        monster.getComponent(Monster).init( pos === DIRECTION.LEFT , this._difficulty);\n    }\n\n    setInsaneTimer(){\n        if ( this._difficulty === 3)\n            this._monsterArr[0].startInsaneTimer();\n    }\n\n\n    score(){\n        this._score++;\n        this._gameUI.updateScore( this._score );\n    }\n\n    addFever(){\n        if ( this._feverMode === true ) return;\n        this._fever += 1 / this._feverPerScore;\n\n\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever >= 1) {\n            this.feverOn();\n        }\n    }\n\n    feverOn(){\n        this._feverMode = true;\n        this._gameUI.setFeverMode();\n        this.unschedule( this._updateTimeCount );\n\n        // this._timeCount--;\n        this._updateTimeCount();\n\n        this.schedule( this._updateFever  );\n        cc.log(\"fever start \");\n    }\n\n\n\n    playerDamaged(){\n        this._health--;\n        if ( this._health <= 0 ){\n            this.gameOver();\n        }\n\n        this._gameUI.updateHealth( this._health );\n\n\n        this._comboCount = 0;\n        this._gameUI.updateCombo(       this._comboCount );\n    }\n\n\n    gameOver(){\n        this._blockInputFeverFinish = true;\n        this._blockInput = true;\n        this._monsterArr[0].pauseTimer();\n        this._gameUI.gameOver();\n        this.unschedule( this._updateTimeCount );\n        this.unschedule( this._updateFever );\n\n\n        setTimeout( ()=>{\n            this.showResult();\n        } , 1500 );\n    }\n\n\n\n\n    _updateFever( dt : number){\n        this._fever -= dt * 0.4;\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever <= 0){\n            this.unschedule( this._updateFever );\n            this.finishFever();\n        }\n    }\n\n    finishFever(){\n        cc.log(\"fever finished\" , \"block inpug\");\n        this._feverMode = false;\n        this._blockInputFeverFinish = true;\n\n\n        //몬스터 싹 날리기\n        this._monsterArr.forEach( element =>{\n            element.damaged( true );\n        });\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.length = 0;\n        //\n\n\n\n        this._gameUI.finishFeverMode( this.feverFinishDelay , this.gameRestartDelay );\n\n\n\n\n        cc.tween( this.node )\n        .delay( this.feverFinishDelay )\n        .call(()=>{\n            for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n                this.makeNewMonster();\n            }\n        })\n        .delay( this.gameRestartDelay )\n        .call( ()=>{\n            this.schedule( this._updateTimeCount , 1 );\n            this._blockInputFeverFinish = false;\n        })\n        .start();\n    }\n\n\n\n    runCheat(){\n        if ( this._monsterDirectionArray.length === 0 ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT )\n            this.leftAction();\n        else \n            this.rightAction();\n\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameUIController extends cc.Component {\n\n\n    _gameManager : GameManager = null!;\n\n    _gameUI : cc.Node = null;\n    _lbScore    : cc.Label = null!;\n    _lbTime     : cc.Label = null!;\n    _lbGameOver : cc.Node = null!;\n    _btnMain : cc.Node = null;\n    _lbReady : cc.Node = null!;\n    _lbGo : cc.Node = null!;\n    _lbFever    : cc.Node = null!;\n    _lbFeverFinish : cc.Node = null!;\n    _feverGauge : cc.ProgressBar = null!;\n    _heartContainer : cc.Node = null!;\n\n\n    _lbCombo : cc.Label = null!;\n\n    @property(cc.Prefab)\n    heartPrefab : cc.Prefab = null!;\n\n    onLoad () {\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._gameUI            = this.node;\n        this._lbScore           = cc.find(\"lbScore\", this._gameUI).getComponent(cc.Label);\n        this._lbTime            = cc.find(\"lbTime\", this._gameUI).getComponent(cc.Label);\n        this._lbGameOver        = cc.find(\"lbGameOver\", this._gameUI);\n        this._lbReady           = cc.find(\"lbReady\", this._gameUI);\n        this._lbGo              = cc.find(\"lbGo\", this._gameUI);\n        this._lbFever           = cc.find(\"lbFever\", this._gameUI);\n        this._feverGauge        = cc.find(\"feverGauge\", this._gameUI).getComponent(cc.ProgressBar);\n        this._heartContainer    = cc.find(\"heartContainer\", this._gameUI);\n        this._btnMain           = cc.find(\"lbGameOver/btnMain\" , this._gameUI );\n        this._lbFeverFinish     = cc.find(\"lbFeverFinish\", this._gameUI);\n        this._lbCombo           = cc.find(\"comboUI/lbCombo\", this._gameUI).getComponent(cc.Label);\n\n\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n\n        // this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n\n    }\n\n\n\n    initializeGame(){\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbFeverFinish.active   = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n        this._heartContainer.active = true;\n        // this._heartContainer.removeAllChildren();\n\n\n        let heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n    }\n\n    startCountDown( countDown : number , gameStartCallback : ()=>void){\n        cc.tween(this.node)\n        .call(()=>{\n            this._lbReady.active = true;\n        })\n        .delay(countDown)\n        .call(()=>{\n            this._lbReady.active = false;\n            this._lbGo.active = true;\n            gameStartCallback();\n        })\n        .delay(0.4)\n        .call(()=>{\n            this._lbGo.active = false;\n        })\n        .start();\n    }\n\n\n    updateHealth( health : number ){\n        if ( health < 0) cc.warn( \"health below 0 \" , health );\n        for( let i = 0 ; i < this._heartContainer.children.length ; i ++ ){\n            if ( i < health )\n                this._heartContainer.children[i].active = true;\n            else \n                this._heartContainer.children[i].active = false;\n        }\n    }\n\n    updateRemainTime( time : number ){\n        this._lbTime.string = time + \"\";\n    }\n\n    updateScore( score : number ){\n        this._lbScore.string = score +\"\";\n    }\n\n    updateFever( fever : number ){\n        this._feverGauge.progress = fever;\n    }\n\n\n    setFeverMode( ){\n        this._lbFever.active = true;\n        this._lbFever.opacity = 255;\n    }\n\n    finishFeverMode(feverFinishDelay,gameRestartDelay){\n        this._lbFeverFinish.active = true;\n        cc.tween( this._lbFever )\n        .to( feverFinishDelay , {opacity : 0})\n        .delay( gameRestartDelay )\n        .call( ()=>{\n            this._lbFeverFinish.active = false;\n        })\n        .start();\n    }\n\n\n    gameOver(){\n        this._lbGameOver.active = true;\n    }\n\n    updateCombo( count : number ){\n        if ( count === 0 ){\n            this._lbCombo.node.parent.active = false;\n        }\n        else {\n            this._lbCombo.node.parent.active = true;\n        }\n\n        this._lbCombo.string = count + \"\\nCombo\";\n    }\n}\n","\nconst {ccclass, property} = cc._decorator;\nimport GameManager from \"./GameManager\"\n\n@ccclass\nexport default class InputManager extends cc.Component {\n\n\n\n\n    _pressA : boolean = false;\n    _pressB : boolean = false;\n\n\n    gameMamager : GameManager = null!;\n\n\n    _leftPanel : cc.Node = null!;\n    _rightPanel : cc.Node = null!;\n\n    _inputDelay : number = 0.1;\n    _blockInput : boolean = false;\n\n    onLoad () {\n\n        this.gameMamager = this.getComponent(\"GameManager\");\n\n        this._leftPanel = cc.find(\"InputPanelLeft\");\n        this._rightPanel = cc.find(\"InputPanelRight\");\n\n\n        // this._blockInput = true;\n        // cc.tween( this.node )\n        // .delay(0.1)\n        // .call(()=>{ this._blockInput = false; })\n        // .start();\n\n    }\n\n    start () {\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n\n\n            cc.log(\"init event \"); \n            this._leftPanel.on('click' , this.gameMamager.leftAction , this.gameMamager );\n            this._rightPanel.on('click' , this.gameMamager.rightAction , this.gameMamager);\n    }\n\n    onDestroy() {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n\n    onKeyDown(event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                if ( this._pressA === false ){\n                    this.gameMamager.leftAction();\n                }\n                this._pressA = true;\n                this.blockInput();\n                \n                break;\n            case cc.macro.KEY.right:\n                if ( this._pressB === false ){\n                    this.gameMamager.rightAction();\n                }\n                this._pressB = true;\n                this.blockInput();\n                break;\n        }\n\n        \n    }\n\n    onKeyUp (event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                this._pressA = false;\n                break;\n            case cc.macro.KEY.right:\n                this._pressB = false;\n                break;\n        }\n\n    }\n\n\n    blockInput(){\n        this._blockInput = true;\n        cc.tween( this.node )\n        .delay(this._inputDelay)\n        .call(()=>{ this._blockInput = false; })\n        .start();\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MainUIController extends cc.Component {\n\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Monster extends cc.Component {\n\n    colorArr: cc.Color[] = [\n        cc.color(255,251,171),\n        cc.color(171,251,255),\n        cc.color(255,171,255),\n    ];\n\n\n    health : number = 1;\n\n    hp : cc.Node[] = [];\n\n    _atkTimer : cc.ProgressBar = null!;\n\n\n    gameManager : GameManager = null!;\n\n    _characterNode : cc.Node = null!;\n    _animation : cc.Animation = null!;\n\n    onLoad(){\n        this._atkTimer = cc.find('atkTimer', this.node).getComponent(cc.ProgressBar);\n        this._atkTimer.node.active = false;\n\n\n        this._characterNode = cc.find(\"CharacterNode\", this.node );\n        this.gameManager = cc.find(\"GameManager\").getComponent(GameManager);\n\n    }\n\n    init( isLeft : boolean  , difficulty : number){\n        this._animation = this._characterNode.getComponent(cc.Animation);\n\n        let rnd = difficulty === 0 ? 2 : 3;\n        let health = Math.floor(Math.random() * rnd ) + 1;\n\n\n        if ( isLeft ){\n            this.node.scaleX = -1;\n        }\n\n\n        let healthContainer = cc.find(\"HealthContainer\" , this.node );\n\n        this.hp.push( healthContainer.children[0]);\n        this.hp.push( healthContainer.children[1]);\n        this.hp.push( healthContainer.children[2]);\n\n        if ( health === 1 ){\n            this._characterNode.color     = this.colorArr[0];\n            this.hp[0].color    = this.colorArr[0];\n            this.hp[1].color    = this.colorArr[0];\n            this.hp[2].color    = this.colorArr[0];\n            this.hp[0].active = true;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n        else if ( health === 2 ){\n            this._characterNode.color     = this.colorArr[1];\n            this.hp[0].color    = this.colorArr[1];\n            this.hp[1].color    = this.colorArr[1];\n            this.hp[2].color    = this.colorArr[1];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = false;\n        }\n        else if ( health === 3 ){\n            this._characterNode.color     = this.colorArr[2];\n            this.hp[0].color    = this.colorArr[2];\n            this.hp[1].color    = this.colorArr[2];\n            this.hp[2].color    = this.colorArr[2];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = true;\n        }\n\n        if ( difficulty >= 2 ){\n            this.hp[0].active = false;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n\n        if ( difficulty >= 3 ){\n            this._atkTimer.node.active =true;\n        }\n\n        this.health = health;\n\n\n\n        this._animation.play('monsterIdle');\n    }\n\n\n    damaged( onePunch : boolean ) : boolean {\n        this.health--;\n        this.hp[this.health].active = false;\n\n        this._atkTimerCur = this._atkTimerBase;\n\n        this._animation.play('monsterDamage');\n        if ( this.health === 0  || onePunch ){\n            this.dieAnimation();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n\n    dieAnimation(){\n        this._animation.play('monsterDead');\n        cc.tween( this.node )\n        .to( 0.1 , { opacity : 0 , position : cc.v2( this.node.x , 100) })\n        .removeSelf()\n        .start();\n        // this.node.removeFromParent();\n    }\n\n\n    _atkTimerCur : number = 99;\n    _atkTimerBase : number = 0.5;\n    startInsaneTimer(){\n        this._atkTimer.node.active = true;\n        this._atkTimerCur = this._atkTimerBase;\n        this.schedule( this._insaneModeTimer , 0 );\n    }\n\n    _insaneModeTimer( dt : number ){\n        this._atkTimerCur -= dt ;\n        this._atkTimer.progress = this._atkTimerCur / this._atkTimerBase;\n        if ( this._atkTimerCur <= 0 ){\n            this._atkTimerCur = this._atkTimerBase;\n            this._attack();\n        }\n    }\n\n    _attack(){\n        // cc.log('Monster.ts(118)' , \"_attack\" );\n        this.gameManager.playerDamaged();\n    }\n\n    pauseTimer(){\n        this.unschedule( this._insaneModeTimer );\n        // this._atkTimer.node.active = false;\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Player extends cc.Component {\n\n    _animation : cc.Animation = null!\n    _animationName : string[] = [\n        'characterIdle',\n        'characterAtk1',\n        'characterAtk2',\n        'characterAtk3'\n    ];\n\n    //테스트용 임시 변수\n    _baseScale : number = 0.5;\n    _currentAtkAnim : number = 0;\n\n\n\n    _atkAnimationInterval : number = 0.2;\n    _actionTimeout : number = -1;\n\n    onLoad(){\n        this._animation = this.getComponent(cc.Animation);\n        this._animation.on( 'finished' , this.onAnimFinishedCallback, this);\n    }\n\n    init(){\n\n    }\n\n\n    leftAction(){\n        this.node.scaleX = this._baseScale * -1;\n\n        this._playAtkAnim();\n    }\n\n    rightAction(){\n        this.node.scaleX = this._baseScale;\n        this._playAtkAnim();\n    }\n\n    _playAtkAnim(){\n        this._currentAtkAnim++;\n        if ( this._currentAtkAnim > 3 ){\n            this._currentAtkAnim = 1;\n        }\n        clearTimeout(this._actionTimeout);\n        this._actionTimeout = -1;\n        // cc.log('Player.ts(57)' , 'characterAtk' + this._currentAtkAnim );\n        this._animation.play('characterAtk' + this._currentAtkAnim );\n    }\n\n    onAnimFinishedCallback(){\n        this._actionTimeout = setTimeout( ()=>{\n            this._animation.play('characterIdle');\n            this._currentAtkAnim = 0;\n            this._actionTimeout = -1;\n        } , this._atkAnimationInterval * 1000);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n    _gameManager : GameManager = null!;\n    _lbScore : cc.Label = null!;\n    _lbCombo : cc.Label = null!;\n    _lbLife : cc.Label = null!;\n    _lbTotal : cc.Label = null!;\n\n\n    _btnMain : cc.Node = null!;\n    _btnRetry : cc.Node = null!;\n\n    _targetLabel : cc.Label = null!;\n\n    _counter : number = 20;\n    _countingTime : number = 1;\n\n\n    _score : number = 0;\n    _combo : number = 0;\n    _life : number = 0;\n\n    onLoad(){\n\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._lbScore = cc.find(\"lbScore2\" , this.node ).getComponent(cc.Label );\n        this._lbCombo = cc.find(\"lbCombo2\" , this.node ).getComponent(cc.Label );\n        this._lbLife  = cc.find(\"lbLife2\" , this.node ).getComponent(cc.Label );\n        this._lbTotal = cc.find(\"lbTotal2\" , this.node ).getComponent(cc.Label );\n        \n\n\n        this._btnMain = cc.find( \"btnMain\" , this.node );\n        this._btnRetry = cc.find( \"btnRetry\" , this.node );\n\n\n        this._btnMain.active = false;\n        this._btnRetry.active = false;\n\n\n        this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n        this._btnRetry.on('click', this._gameManager.restartGame , this._gameManager );\n\n        this.node.on('click' , this._skipCounting , this );\n    }\n\n\n    showResult( score : number , combo : number , life : number ){\n\n        this._score = score;\n        this._combo = combo;\n        this._life = life;\n\n        this._lbScore.string = \"\";\n        this._lbCombo.string = \"\";\n        this._lbLife.string = \"\";\n        this._lbTotal.string = \"\";\n\n        cc.tween( this.node )\n        .call( ()=>{\n            this._labelCounting( this._lbScore , 0 , score );\n            this._labelCounting( this._lbTotal , 0 , score );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbCombo , 0 , combo );\n            this._labelCounting( this._lbTotal , score ,  score + combo  );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbLife , 0 , life );\n            this._labelCounting( this._lbTotal , score + combo  , score + combo + life );\n        })\n        .delay(this._countingTime + 0.5)\n        .call(()=>{\n            this._showRetry();\n        })\n        .start();\n    }\n\n    _labelCounting( label : cc.Label , start : number , end : number ){\n\n\n        let dt = this._countingTime / this._counter;\n    \n        let currNum = start;\n        let dcount = (end - start) / this._counter;\n\n    \n        label.schedule( ()=>{ \n            currNum += dcount;\n            label.string = Math.round(currNum).toString();\n        }, \n        dt, \n        this._counter -1);\n    }\n\n    _skipCounting(){\n        cc.director.getActionManager().removeAllActionsFromTarget(this.node , true);\n        this._lbScore.unscheduleAllCallbacks();\n        this._lbLife.unscheduleAllCallbacks();\n        this._lbCombo.unscheduleAllCallbacks();\n        this._lbTotal.unscheduleAllCallbacks();\n\n        this._lbScore.string = this._score.toString();\n        this._lbCombo.string = this._combo.toString();\n        this._lbLife.string = this._life.toString();\n\n        this._lbTotal.string = ( this._score + this._combo + this._life ).toString();\n        this._showRetry();\n    }\n\n    _showRetry(){\n        this._btnMain.active = true;\n        this._btnRetry.active = true;\n    }\n}\n"],"file":"index.js"}