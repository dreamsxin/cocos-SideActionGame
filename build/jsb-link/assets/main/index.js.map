{"version":3,"sources":["assets/Scripts/GameManager.ts","assets/Scripts/GameUIController.ts","assets/Scripts/InputManager.ts","assets/Scripts/MenuUIController.ts","assets/Scripts/Monster.ts","assets/Scripts/Player.ts","assets/Scripts/ScoreUIController.ts"],"names":["GameUIController_1","require","ScoreUIController_1","Monster_1","Player_1","_a","cc","_decorator","ccclass","property","DIRECTION","GameManager","_super","__extends","_this","apply","this","arguments","feverFinishDelay","gameRestartDelay","_menuUI","_btnDiff","_gameUI","_scoreUI","_monsterDistance","_difficulty","_score","_fever","_comboCount","_maxCombo","_timeCount","_health","_feverPerScore","_insaneTimer","_feverMode","_blockInputMovement","_blockInputFeverFinish","player","monsterPrefab","_monsterDirectionArray","_monsterArr","_monsterCount","prototype","onLoad","initMenu","find","getComponent","default","start","showMain","active","on","startGame","bind","resetGame","node","showResult","restartGame","diff","initializeGame","updateHealth","updateFever","updateRemainTime","updateScore","updateCombo","i","makeNewMonster","countDown","startCountDown","setInsaneTimer","schedule","_updateTimeCount","length","forEach","element","removeFromParent","gameOver","leftAction","log","LEFT","attackMonster","playerDamaged","rightAction","RIGHT","damaged","splice","moveToCenter","score","addFever","targetPos","v2","tween","to","position","delay","call","pos","Math","floor","random","push","index","monster","instantiate","moveTargetPos","setPosition","addChild","init","startInsaneTimer","feverOn","setFeverMode","unschedule","_updateFever","pauseTimer","setTimeout","dt","finishFever","finishFeverMode","runCheat","__decorate","Prefab","Component","exports","GameManager_1","GameUIController","_gameManager","_lbScore","_lbTime","_lbGameOver","_btnMain","_lbReady","_lbGo","_lbFever","_lbFeverFinish","_feverGauge","_heartContainer","_lbCombo","heartPrefab","Label","ProgressBar","heart","gameStartCallback","health","warn","children","time","string","fever","progress","opacity","count","parent","InputManager","_pressA","_pressB","gameMamager","_leftPanel","_rightPanel","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","onDestroy","off","event","keyCode","macro","KEY","left","right","MainUIController","Monster","colorArr","color","hp","_atkTimer","gameManager","_characterNode","_animation","_atkTimerCur","_atkTimerBase","isLeft","difficulty","Animation","rnd","scaleX","healthContainer","play","onePunch","dieAnimation","x","removeSelf","_insaneModeTimer","_attack","Player","_animationName","_baseScale","_currentAtkAnim","_atkAnimationInterval","_actionTimeout","onAnimFinishedCallback","_playAtkAnim","clearTimeout","NewClass","_lbLife","_lbTotal","_btnRetry","_targetLabel","_counter","_countingTime","_combo","_life","_skipCounting","combo","life","_labelCounting","_showRetry","label","end","currNum","dcount","round","toString","director","getActionManager","removeAllActionsFromTarget","unscheduleAllCallbacks"],"mappings":"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","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameUIController from \"./GameUIController\";\nimport ScoreUIController from \"./ScoreUIController\"\nimport Monster from \"./Monster\";\nimport Player from \"./Player\";\nconst {ccclass, property} = cc._decorator;\n\n\n\nenum DIRECTION {\n    LEFT = -1,\n    RIGHT = 1,\n}\n@ccclass\nexport default class GameManager extends cc.Component {\n\n    feverFinishDelay = 0.3;\n    gameRestartDelay = 1;\n\n\n\n\n\n    _menuUI : cc.Node = null!;\n    _btnDiff : cc.Node[] = [];\n\n    _gameUI : GameUIController = null!;\n    _scoreUI : ScoreUIController = null!;\n\n\n    _monsterDistance : number = 64;\n\n\n    //InGame Value\n    _difficulty : number = 0;\n    _score = 0;\n    _fever = 0;\n    _comboCount : number= 0;\n    _maxCombo : number = 0;\n    _timeCount : number = 30;\n    _health = 3;\n    _feverPerScore = 99;\n    _insaneTimer = 0.2;\n    _feverMode : boolean = false;\n\n    _blockInputMovement : boolean = true;\n    _blockInputFeverFinish : boolean = true;\n\n\n\n\n    @property(Player)\n    player : Player = null!;\n    @property(cc.Prefab)\n    monsterPrefab : cc.Prefab = null!;\n\n\n\n    //GameNode\n    _monsterDirectionArray : number[] = [];\n    _monsterArr : Monster[] = [];\n\n    _monsterCount : number = 4;\n\n    onLoad(){\n        this.initMenu();\n\n        this._gameUI = cc.find(\"GameUI\").getComponent(GameUIController);\n        this._scoreUI = cc.find(\"ScoreUI\").getComponent(ScoreUIController);\n\n\n\n    }\n\n\n\n    start(){\n        // this.showResult();\n        this.showMain();\n\n\n        // this.schedule( this.runCheat );\n    }\n\n\n\n\n    initMenu(){\n        this._menuUI = cc.find(\"MenuUI\");\n\n        this._menuUI.active = true;\n        cc.find( \"lbEasy\"   , this._menuUI ).on('click' , this.startGame.bind( this , 0) , this );  \n        cc.find( \"lbHard\"   , this._menuUI ).on('click' , this.startGame.bind( this , 1) , this );  \n        cc.find( \"lbHell\"   , this._menuUI ).on('click' , this.startGame.bind( this , 2) , this );  \n        cc.find( \"lbInsane\" , this._menuUI ).on('click' , this.startGame.bind( this , 3) , this );\n\n    }\n\n    showMain(){\n        this.resetGame();\n        this._gameUI.node.active = false;\n        this._menuUI.active = true;\n        this._scoreUI.node.active = false;\n    }\n\n    showResult(){\n        this._gameUI.node.active = false;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = true;\n        this._scoreUI.showResult(this._score, this._maxCombo , this._health * 100);\n    }\n\n    restartGame(){\n        this.resetGame();\n        this.startGame( this._difficulty );\n    }\n\n\n\n    startGame( diff : number ){\n\n\n        this._gameUI.node.active = true;\n        this._menuUI.active = false;\n        this._scoreUI.node.active = false;\n\n\n\n        this._difficulty = diff;\n\n\n        this._gameUI.initializeGame();\n        this._gameUI.updateHealth(      this._health );\n        this._gameUI.updateFever(       this._fever);\n        this._gameUI.updateRemainTime(  this._timeCount);\n        this._gameUI.updateScore(       this._score );\n        this._gameUI.updateCombo(       this._comboCount );\n\n\n        for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n            this.makeNewMonster();\n        }\n\n\n\n\n        let countDown = 1;\n        this._gameUI.startCountDown( countDown  , ()=>{\n            this.setInsaneTimer();\n            this._blockInputMovement = false;\n            this._blockInputFeverFinish = false;\n            this.schedule( this._updateTimeCount , 1 );\n        });\n    }\n\n\n    resetGame(){\n        // this._difficulty = 0;\n        this._score = 0;\n        this._fever = 0;\n        this._timeCount = 30;\n        this._health = 3;\n        this._feverPerScore = 10;\n        this._comboCount = 0;\n        this._maxCombo = 0;\n\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.forEach( element =>{\n            element.node.removeFromParent();\n        })\n        this._monsterArr.length = 0;\n    }\n\n    _updateTimeCount(){\n        this._timeCount--;\n        this._gameUI.updateRemainTime( this._timeCount );\n        if ( this._timeCount === 0 ){\n            this.gameOver();\n        }\n    }\n\n    leftAction(){\n        cc.log(\"left action\");\n        if ( this._blockInputMovement === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT  || this._feverMode ){\n            this.player.leftAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n    rightAction(){\n        cc.log(\"right action\");\n        if ( this._blockInputMovement === true  || this._blockInputFeverFinish === true ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.RIGHT || this._feverMode ){\n            this.player.rightAction();\n            this.attackMonster();\n        }\n        else {\n            this.playerDamaged();\n        }\n    }\n\n\n    attackMonster(){\n        cc.log(\"attack monster \" + this._feverMode );\n        if ( this._monsterArr.length === 0 ) return; \n\n        if ( this._monsterArr[0].damaged( this._feverMode )  ){\n            this._monsterDirectionArray.splice(0,1);\n            this._monsterArr.splice(0,1);\n            this.moveToCenter();\n            this.makeNewMonster();\n            this.score();\n            this.addFever();\n            this.setInsaneTimer();\n        }\n\n        this._maxCombo = this._maxCombo > this._comboCount ? this._maxCombo : this._comboCount;\n        this._gameUI.updateCombo(       this._comboCount++ );\n    }\n\n    moveToCenter(){\n\n        this._blockInputMovement = true;\n        for( let i = 0 ; i < this._monsterDirectionArray.length ; i ++ ){\n            let targetPos = cc.v2((i + 1) * this._monsterDistance *  this._monsterDirectionArray[i] , 0);\n            cc.tween( this._monsterArr[i].node )\n            .to( 0.1 , { position : targetPos})\n            .start();\n        }\n\n        cc.tween( this.node )\n        .delay(0.1)\n        .call(()=>{ this._blockInputMovement = false; })\n        .start();\n    }\n\n    makeNewMonster(){\n        let pos = Math.floor(Math.random() * 2);\n        if ( pos === 0 ) pos = -1;\n        this._monsterDirectionArray.push( pos );\n\n\n\n        let index = this._monsterDirectionArray.length;\n        let monster = cc.instantiate(this.monsterPrefab);\n\n\n        let moveTargetPos = cc.v2(index  * this._monsterDistance *  pos , 0 );\n        monster.setPosition( this._monsterDistance * 6 *  pos , 0 );\n\n        cc.tween( monster )\n        .to( 0.3 , {position : moveTargetPos} )\n        .start();\n\n        this.node.addChild( monster );\n\n        this._monsterArr.push(monster.getComponent(Monster));\n\n        monster.getComponent(Monster).init( pos === DIRECTION.LEFT , this._difficulty);\n    }\n\n    setInsaneTimer(){\n        if ( this._difficulty === 3)\n            this._monsterArr[0].startInsaneTimer();\n    }\n\n\n    score(){\n        this._score++;\n        this._gameUI.updateScore( this._score );\n    }\n\n    addFever(){\n        if ( this._feverMode === true ) return;\n        this._fever += 1 / this._feverPerScore;\n\n\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever >= 1) {\n            this.feverOn();\n        }\n    }\n\n    feverOn(){\n        this._feverMode = true;\n        this._gameUI.setFeverMode();\n        this.unschedule( this._updateTimeCount );\n\n        // this._timeCount--;\n        this._updateTimeCount();\n\n        this.schedule( this._updateFever  );\n        cc.log(\"fever start \");\n    }\n\n\n\n    playerDamaged(){\n\n        this._health--;\n        if ( this._health <= 0 ){\n            this.gameOver();\n        }\n\n        this._gameUI.updateHealth( this._health );\n\n\n        this._comboCount = 0;\n        this._gameUI.updateCombo(       this._comboCount );\n\n    }\n\n\n    gameOver(){\n        this._blockInputFeverFinish = true;\n        this._blockInputMovement = true;\n        this._monsterArr[0].pauseTimer();\n        this._gameUI.gameOver();\n        this.unschedule( this._updateTimeCount );\n        this.unschedule( this._updateFever );\n\n\n        setTimeout( ()=>{\n            this.showResult();\n        } , 1500 );\n    }\n\n\n\n\n    _updateFever( dt : number){\n        this._fever -= dt * 0.4;\n        this._gameUI.updateFever( this._fever );\n        if ( this._fever <= 0){\n            this.unschedule( this._updateFever );\n            this.finishFever();\n        }\n    }\n\n    finishFever(){\n        cc.log(\"fever finished\" , \"block inpug\");\n        this._feverMode = false;\n        this._blockInputFeverFinish = true;\n\n\n        //몬스터 싹 날리기\n        this._monsterArr.forEach( element =>{\n            element.damaged( true );\n        });\n        this._monsterDirectionArray.length = 0;\n        this._monsterArr.length = 0;\n        //\n\n\n\n        this._gameUI.finishFeverMode( this.feverFinishDelay , this.gameRestartDelay );\n\n\n\n\n        cc.tween( this.node )\n        .delay( this.feverFinishDelay )\n        .call(()=>{\n            for ( let i = 0 ; i < this._monsterCount ; i ++ ){\n                this.makeNewMonster();\n            }\n        })\n        .delay( this.gameRestartDelay )\n        .call( ()=>{\n            this.schedule( this._updateTimeCount , 1 );\n            this._blockInputFeverFinish = false;\n        })\n        .start();\n    }\n\n\n\n    runCheat(){\n        if ( this._monsterDirectionArray.length === 0 ) return;\n\n        if ( this._monsterDirectionArray[0] === DIRECTION.LEFT )\n            this.leftAction();\n        else \n            this.rightAction();\n\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class GameUIController extends cc.Component {\n\n\n    _gameManager : GameManager = null!;\n\n    _gameUI : cc.Node = null;\n    _lbScore    : cc.Label = null!;\n    _lbTime     : cc.Label = null!;\n    _lbGameOver : cc.Node = null!;\n    _btnMain : cc.Node = null;\n    _lbReady : cc.Node = null!;\n    _lbGo : cc.Node = null!;\n    _lbFever    : cc.Node = null!;\n    _lbFeverFinish : cc.Node = null!;\n    _feverGauge : cc.ProgressBar = null!;\n    _heartContainer : cc.Node = null!;\n\n\n    _lbCombo : cc.Label = null!;\n\n    @property(cc.Prefab)\n    heartPrefab : cc.Prefab = null!;\n\n    onLoad () {\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._gameUI            = this.node;\n        this._lbScore           = cc.find(\"lbScore\", this._gameUI).getComponent(cc.Label);\n        this._lbTime            = cc.find(\"lbTime\", this._gameUI).getComponent(cc.Label);\n        this._lbGameOver        = cc.find(\"lbGameOver\", this._gameUI);\n        this._lbReady           = cc.find(\"lbReady\", this._gameUI);\n        this._lbGo              = cc.find(\"lbGo\", this._gameUI);\n        this._lbFever           = cc.find(\"lbFever\", this._gameUI);\n        this._feverGauge        = cc.find(\"feverGauge\", this._gameUI).getComponent(cc.ProgressBar);\n        this._heartContainer    = cc.find(\"heartContainer\", this._gameUI);\n        this._btnMain           = cc.find(\"lbGameOver/btnMain\" , this._gameUI );\n        this._lbFeverFinish     = cc.find(\"lbFeverFinish\", this._gameUI);\n        this._lbCombo           = cc.find(\"comboUI/lbCombo\", this._gameUI).getComponent(cc.Label);\n\n\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n\n        // this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n\n    }\n\n\n\n    initializeGame(){\n        this._lbScore.node.active    = true;\n        this._lbTime.node.active     = true;\n        this._lbGameOver.active      = false;\n        this._lbFever.active         = false;\n        this._lbFeverFinish.active   = false;\n        this._lbGo.active            = false;\n        this._lbReady.active         = false;\n        this._feverGauge.node.active = true;\n        this._heartContainer.active = true;\n        // this._heartContainer.removeAllChildren();\n\n\n        let heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n        heart = cc.instantiate(this.heartPrefab);\n        this._heartContainer.addChild(heart);\n    }\n\n    startCountDown( countDown : number , gameStartCallback : ()=>void){\n        cc.tween(this.node)\n        .call(()=>{\n            this._lbReady.active = true;\n        })\n        .delay(countDown)\n        .call(()=>{\n            this._lbReady.active = false;\n            this._lbGo.active = true;\n            gameStartCallback();\n        })\n        .delay(0.4)\n        .call(()=>{\n            this._lbGo.active = false;\n        })\n        .start();\n    }\n\n\n    updateHealth( health : number ){\n        if ( health < 0) cc.warn( \"health below 0 \" , health );\n        for( let i = 0 ; i < this._heartContainer.children.length ; i ++ ){\n            if ( i < health )\n                this._heartContainer.children[i].active = true;\n            else \n                this._heartContainer.children[i].active = false;\n        }\n    }\n\n    updateRemainTime( time : number ){\n        this._lbTime.string = time + \"\";\n    }\n\n    updateScore( score : number ){\n        this._lbScore.string = score +\"\";\n    }\n\n    updateFever( fever : number ){\n        this._feverGauge.progress = fever;\n    }\n\n\n    setFeverMode( ){\n        this._lbFever.active = true;\n        this._lbFever.opacity = 255;\n    }\n\n    finishFeverMode(feverFinishDelay,gameRestartDelay){\n        this._lbFeverFinish.active = true;\n        cc.tween( this._lbFever )\n        .to( feverFinishDelay , {opacity : 0})\n        .delay( gameRestartDelay )\n        .call( ()=>{\n            this._lbFeverFinish.active = false;\n        })\n        .start();\n    }\n\n\n    gameOver(){\n        this._lbGameOver.active = true;\n    }\n\n    updateCombo( count : number ){\n        if ( count === 0 ){\n            this._lbCombo.node.parent.active = false;\n        }\n        else {\n            this._lbCombo.node.parent.active = true;\n        }\n\n        this._lbCombo.string = count + \"\\nCombo\";\n    }\n}\n","\nconst {ccclass, property} = cc._decorator;\nimport GameManager from \"./GameManager\"\n\n@ccclass\nexport default class InputManager extends cc.Component {\n\n\n\n\n    _pressA : boolean = false;\n    _pressB : boolean = false;\n\n\n    gameMamager : GameManager = null!;\n\n\n    _leftPanel : cc.Node = null!;\n    _rightPanel : cc.Node = null!;\n\n    onLoad () {\n\n        this.gameMamager = this.getComponent(\"GameManager\");\n\n        this._leftPanel = cc.find(\"InputPanelLeft\");\n        this._rightPanel = cc.find(\"InputPanelRight\");\n\n\n\n\n    }\n\n    start () {\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n\n\n            cc.log(\"init event \"); \n            this._leftPanel.on('click' , this.gameMamager.leftAction , this.gameMamager );\n            this._rightPanel.on('click' , this.gameMamager.rightAction , this.gameMamager);\n    }\n\n    onDestroy() {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n\n    onKeyDown(event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                if ( this._pressA === false ){\n                    this.gameMamager.leftAction();\n                }\n                this._pressA = true;\n                break;\n            case cc.macro.KEY.right:\n                if ( this._pressB === false ){\n                    this.gameMamager.rightAction();\n                }\n                this._pressB = true;\n                break;\n        }\n    }\n\n    onKeyUp (event : cc.Event.EventKeyboard) {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n                this._pressA = false;\n                break;\n            case cc.macro.KEY.right:\n                this._pressB = false;\n                break;\n        }\n\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MainUIController extends cc.Component {\n\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Monster extends cc.Component {\n\n    colorArr: cc.Color[] = [\n        cc.color(255,251,171),\n        cc.color(171,251,255),\n        cc.color(255,171,255),\n    ];\n\n\n    health : number = 1;\n\n    hp : cc.Node[] = [];\n\n    _atkTimer : cc.ProgressBar = null!;\n\n\n    gameManager : GameManager = null!;\n\n    _characterNode : cc.Node = null!;\n    _animation : cc.Animation = null!;\n\n    onLoad(){\n        this._atkTimer = cc.find('atkTimer', this.node).getComponent(cc.ProgressBar);\n        this._atkTimer.node.active = false;\n\n\n        this._characterNode = cc.find(\"CharacterNode\", this.node );\n        this.gameManager = cc.find(\"GameManager\").getComponent(GameManager);\n\n    }\n\n    init( isLeft : boolean  , difficulty : number){\n        this._animation = this._characterNode.getComponent(cc.Animation);\n\n        let rnd = difficulty === 0 ? 2 : 3;\n        let health = Math.floor(Math.random() * rnd ) + 1;\n\n\n        if ( isLeft ){\n            this.node.scaleX = -1;\n        }\n\n\n        let healthContainer = cc.find(\"HealthContainer\" , this.node );\n\n        this.hp.push( healthContainer.children[0]);\n        this.hp.push( healthContainer.children[1]);\n        this.hp.push( healthContainer.children[2]);\n\n        if ( health === 1 ){\n            this._characterNode.color     = this.colorArr[0];\n            this.hp[0].color    = this.colorArr[0];\n            this.hp[1].color    = this.colorArr[0];\n            this.hp[2].color    = this.colorArr[0];\n            this.hp[0].active = true;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n        else if ( health === 2 ){\n            this._characterNode.color     = this.colorArr[1];\n            this.hp[0].color    = this.colorArr[1];\n            this.hp[1].color    = this.colorArr[1];\n            this.hp[2].color    = this.colorArr[1];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = false;\n        }\n        else if ( health === 3 ){\n            this._characterNode.color     = this.colorArr[2];\n            this.hp[0].color    = this.colorArr[2];\n            this.hp[1].color    = this.colorArr[2];\n            this.hp[2].color    = this.colorArr[2];\n            this.hp[0].active = true;\n            this.hp[1].active = true;\n            this.hp[2].active = true;\n        }\n\n        if ( difficulty >= 2 ){\n            this.hp[0].active = false;\n            this.hp[1].active = false;\n            this.hp[2].active = false;\n        }\n\n        if ( difficulty >= 3 ){\n            this._atkTimer.node.active =true;\n        }\n\n        this.health = health;\n\n\n\n        this._animation.play('monsterIdle');\n    }\n\n\n    damaged( onePunch : boolean ) : boolean {\n        this.health--;\n        this.hp[this.health].active = false;\n\n        this._atkTimerCur = this._atkTimerBase;\n\n        this._animation.play('monsterDamage');\n        if ( this.health === 0  || onePunch ){\n            this.dieAnimation();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n\n    dieAnimation(){\n        this._animation.play('monsterDead');\n        cc.tween( this.node )\n        .to( 0.1 , { opacity : 0 , position : cc.v2( this.node.x , 100) })\n        .removeSelf()\n        .start();\n        // this.node.removeFromParent();\n    }\n\n\n    _atkTimerCur : number = 99;\n    _atkTimerBase : number = 0.5;\n    startInsaneTimer(){\n        this._atkTimer.node.active = true;\n        this._atkTimerCur = this._atkTimerBase;\n        this.schedule( this._insaneModeTimer , 0 );\n    }\n\n    _insaneModeTimer( dt : number ){\n        this._atkTimerCur -= dt ;\n        this._atkTimer.progress = this._atkTimerCur / this._atkTimerBase;\n        if ( this._atkTimerCur <= 0 ){\n            this._atkTimerCur = this._atkTimerBase;\n            this._attack();\n        }\n    }\n\n    _attack(){\n        // cc.log('Monster.ts(118)' , \"_attack\" );\n        this.gameManager.playerDamaged();\n    }\n\n    pauseTimer(){\n        this.unschedule( this._insaneModeTimer );\n        // this._atkTimer.node.active = false;\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Player extends cc.Component {\n\n    _animation : cc.Animation = null!\n    _animationName : string[] = [\n        'characterIdle',\n        'characterAtk1',\n        'characterAtk2',\n        'characterAtk3'\n    ];\n\n    //테스트용 임시 변수\n    _baseScale : number = 0.5;\n    _currentAtkAnim : number = 0;\n\n\n\n    _atkAnimationInterval : number = 0.2;\n    _actionTimeout : number = -1;\n\n    onLoad(){\n        this._animation = this.getComponent(cc.Animation);\n        this._animation.on( 'finished' , this.onAnimFinishedCallback, this);\n    }\n\n    init(){\n\n    }\n\n\n    leftAction(){\n        this.node.scaleX = this._baseScale * -1;\n\n        this._playAtkAnim();\n    }\n\n    rightAction(){\n        this.node.scaleX = this._baseScale;\n        this._playAtkAnim();\n    }\n\n    _playAtkAnim(){\n        this._currentAtkAnim++;\n        if ( this._currentAtkAnim > 3 ){\n            this._currentAtkAnim = 1;\n        }\n        clearTimeout(this._actionTimeout);\n        this._actionTimeout = -1;\n        // cc.log('Player.ts(57)' , 'characterAtk' + this._currentAtkAnim );\n        this._animation.play('characterAtk' + this._currentAtkAnim );\n    }\n\n    onAnimFinishedCallback(){\n        this._actionTimeout = setTimeout( ()=>{\n            this._animation.play('characterIdle');\n            this._currentAtkAnim = 0;\n            this._actionTimeout = -1;\n        } , this._atkAnimationInterval * 1000);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GameManager from \"./GameManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class NewClass extends cc.Component {\n    _gameManager : GameManager = null!;\n    _lbScore : cc.Label = null!;\n    _lbCombo : cc.Label = null!;\n    _lbLife : cc.Label = null!;\n    _lbTotal : cc.Label = null!;\n\n\n    _btnMain : cc.Node = null!;\n    _btnRetry : cc.Node = null!;\n\n    _targetLabel : cc.Label = null!;\n\n    _counter : number = 20;\n    _countingTime : number = 1;\n\n\n    _score : number = 0;\n    _combo : number = 0;\n    _life : number = 0;\n\n    onLoad(){\n\n        this._gameManager       = cc.find(\"GameManager\").getComponent(GameManager);\n\n\n        this._lbScore = cc.find(\"lbScore2\" , this.node ).getComponent(cc.Label );\n        this._lbCombo = cc.find(\"lbCombo2\" , this.node ).getComponent(cc.Label );\n        this._lbLife  = cc.find(\"lbLife2\" , this.node ).getComponent(cc.Label );\n        this._lbTotal = cc.find(\"lbTotal2\" , this.node ).getComponent(cc.Label );\n        \n\n\n        this._btnMain = cc.find( \"btnMain\" , this.node );\n        this._btnRetry = cc.find( \"btnRetry\" , this.node );\n\n\n        this._btnMain.active = false;\n        this._btnRetry.active = false;\n\n\n        this._btnMain.on('click', this._gameManager.showMain , this._gameManager );\n        this._btnRetry.on('click', this._gameManager.restartGame , this._gameManager );\n\n        this.node.on('click' , this._skipCounting , this );\n    }\n\n\n    showResult( score : number , combo : number , life : number ){\n\n        this._score = score;\n        this._combo = combo;\n        this._life = life;\n\n        this._lbScore.string = \"\";\n        this._lbCombo.string = \"\";\n        this._lbLife.string = \"\";\n        this._lbTotal.string = \"\";\n\n        cc.tween( this.node )\n        .call( ()=>{\n            this._labelCounting( this._lbScore , 0 , score );\n            this._labelCounting( this._lbTotal , 0 , score );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbCombo , 0 , combo );\n            this._labelCounting( this._lbTotal , score ,  score + combo  );\n        })\n        .delay(this._countingTime + 0.5)\n        .call( ()=>{\n            this._labelCounting( this._lbLife , 0 , life );\n            this._labelCounting( this._lbTotal , score + combo  , score + combo + life );\n        })\n        .delay(this._countingTime + 0.5)\n        .call(()=>{\n            this._showRetry();\n        })\n        .start();\n    }\n\n    _labelCounting( label : cc.Label , start : number , end : number ){\n\n\n        let dt = this._countingTime / this._counter;\n    \n        let currNum = start;\n        let dcount = (end - start) / this._counter;\n\n    \n        label.schedule( ()=>{ \n            currNum += dcount;\n            label.string = Math.round(currNum).toString();\n        }, \n        dt, \n        this._counter -1);\n    }\n\n    _skipCounting(){\n        cc.director.getActionManager().removeAllActionsFromTarget(this.node , true);\n        this._lbScore.unscheduleAllCallbacks();\n        this._lbLife.unscheduleAllCallbacks();\n        this._lbCombo.unscheduleAllCallbacks();\n        this._lbTotal.unscheduleAllCallbacks();\n\n        this._lbScore.string = this._score.toString();\n        this._lbCombo.string = this._combo.toString();\n        this._lbLife.string = this._life.toString();\n\n        this._lbTotal.string = ( this._score + this._combo + this._life ).toString();\n        this._showRetry();\n    }\n\n    _showRetry(){\n        this._btnMain.active = true;\n        this._btnRetry.active = true;\n    }\n}\n"],"file":"index.js"}